== GOALS for Wave Game ==
[] read through entire rocket program and make sure I understand EVERYTHING about it.
[] reconfigure the repo as I like
    [] rename "Size" to something that makes more sense, like "Location" or "Area".
        but it's not really an area, as it's just a vector (2 data points)
        so size does make sense, but it's too vague.
[] make rocket its own repository
User Input
    [done] Keyboard
    [] Controller
        [done] joystick
        [done] buttons
        [done] make sure all controller actions are processed in each frame, not just one.
            Yup, for each poll_iter, perfect.
        [] decrease the dead-zone size for more accuracy
            OR keep it, but make it a better equation
            OR make it take into account both axes when figuring out the threshold.
        [] register new controllers when they're plugged in after the game starts.
Dot Physics
    [] change angle_radians to "turns", which I like better for angles.
        or "angle_turns"
    [done] Fix Vector to have two vectors? (see TODO in vector.rs).
        Maybe stop using "vector" entirely, and put it all straight on Player.
        [done] add speed to Player
        [done] use Player speed to ramp stuff up!
        [done] match player movement to joystick
    [] change all occurrences of PI to use TAU instead
    [] Acceleration
        [] change the up button so that it is acceleration instead of
           a constant speed boost
        [] change the gun scatter so that it's a functions of the
           ship's acceleration or speed? Not sure which yet.
    [done] Rotate
        [done] More like, do exactly what the joystick does
        [done] get keyboard working for this, too
Rings
    [done] make circle grow out of player
    [done] change circle colour depending on which button was pressed
    [] change circle to be an "arc", which is a polygon.
        Needs to be a list of arc sections that wrap around 0 properly.
        [done] draw a polygon
            [done] draw vertices of a polygon
            [done] draw it for real
                [done] convert from Point to vec2d
                [done] make polygon
        [done] limit firing rate to one per second
        [done] fix firing rate so the first shot happens.
        [nope] draw 2 layers of polygon
        [done] draw a pretend circle
            takes in two angles, and draws between them
            draws forward from one to the other (even if 0 gets in the way)
            [done] draw it as thick lines instead of polygons
            [done] thicken the lines.
    [] make rings destroy enemies when touching.
        Treat them as a series of rectangles
            [done] Make the ring thickness a property of the wave
            [done] and the colour
            [] make a rectangle hitbox type
    [] remove old bullet system
Collisions being detected between objects
    NOT AABB, but all rectangular bounding boxes
    Some resources:
        http://www.gdcvault.com/play/1022194/Physics-for-Game-Programmers-Robust
        Bonus points if it's integer only
            but the we have to choose between having nice 0 to 1 floats or 0-? integers
    [] do basic intersection detection for some basic types
        [done] point in circle
        [] point in arc
            http://stackoverflow.com/questions/6307114/android-2d-arc-collision-detection
                may not work 100% because of the case where the angle is TAU/2.
                [nope] angle < TAU/2
                    use the method above
                [nope] angle = TAU/2
                    check to-the-right of a line made through the circle
                [nope] angle > TAU/2
                    use the 1st method, but invert the check
                    (so we check if it is NOT within the triangle)
                [] OR we can simplify it!!!! by checking "to the right" of lines.
                lines A and B go from circle origin out, angle distance apart
                if angle <= TAU/2
                    inside if left of A AND right of B
                if angle > TAU/2
                    inside if left of A OR right of B
        [] circle in circle
        [] point in polygon
        [] point in rectangle (for free)
        [] circle in rectangle
        [] make tests where two shapes run at each other,
           and change colour when they are intersecting
        [] move tests to a "tests" folder.
            This is apparently a standard thing to do, and will reduce warnings when running tests.
    [] Make a Graham Scan algorithm to produce 2D convex hulls for lists of points
        https://en.wikipedia.org/wiki/Graham_scan
Draw images to the screen
    with transparency in backgrounds
Lasers
    Death
    Set up targets to shoot
Multiple Players
Resetting the level
Builds
    [done] Set up TravisCI to build the project on stable, beta, and nightly each night.
    [] See if it's possible for different versions of major libraries in use, too.
    [] set up multiple binaries in cargo, so we can test different levels
        So we can make test levels dedicated to things like collisions.
        OR maybe there's a better way?
            I just want to be able to give one command to build and run a certain level.
Tools
    [] Make functions to allow the use of hsl and other non-RGB colour types.
        Use these? https://github.com/servo/rust-css/blob/master/color.rs
        Maybe build these into drawing::color if it's not already there?
    [] Make a VERY EASY way to show a text overlay of things as they happen.
        A scrolling list, like a terminal where messages are popping up.
